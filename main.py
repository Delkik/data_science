"""
Name: Daniel Elkik
Email: daniel.elkik26@myhunter.cuny.edu
Title: Vision Zero's Zero Vision Plan
Resources: https://people.revoledu.com/kardi/tutorial/Python/Displaying+Locations+using+Heatmap.html
https://towardsdatascience.com/how-to-download-files-using-python-ffbca63beb5c
https://data.cityofnewyork.us/Public-Safety/Motor-Vehicle-Collisions-Crashes/h9gi-nx95
https://data.cityofnewyork.us/Transportation/Traffic-Volume-Counts-2014-2019-/ertz-hr4r
https://data.cityofnewyork.us/Transportation/VZV_Neighborhood-Slow-Zones/y4nf-25nw
https://data.cityofnewyork.us/Transportation/VZV_Speed-Limits/7n5j-865y
http://web.mta.info/developers/turnstile.html
URL: https://zero-vision.herokuapp.com/
"""

import matplotlib.pyplot as plt
import matplotlib.style as style
import numpy as np
import os
import pandas as pd
import pandasql as psql
import seaborn as sns
from shapely.geometry import Point,LineString
from shapely.geometry.polygon import Polygon

def getMaxDate(date):
    """" Returns the last day of a specific month. """
    if date[:2] in ["01","03","05","07","08","10","12"]:
        return "31"
    if date[:2] == "02":
        return "28"
    return "31"


crashes = pd.read_csv("CSVs/Motor_Vehicle_Collisions_-_Crashes.csv")
zones = pd.read_csv("CSVs/dot_VZV_Neighborhood_Slow_Zones_20211007.csv")
speed = pd.read_csv("CSVs/dot_VZV_Speed_Limits_20211007 (2).csv")

def createPolygons(names,locations):
    """ Creates a dictionary of slow zones based on names and coordinates where key is neighborhood and value is a Shapely Polygon Object. """
    d = {}
    for i in range(len(names)-1):
        d.setdefault(names[i],0)
        l = []
        e = str(locations[i]).split(",")
        for j in range(len(e)):
            if j == 0:
                l.append( [ e[j][16:e[j].rindex(" ")],e[j][e[j].rindex(" ")+1:]]  )
            elif e[j] == e[-1]:
                l.append([e[j][1:e[j].rindex(" ")],e[j][e[j].rindex(" ")+1:-3]])
            else:
                l.append([e[j][1:e[j].rindex(" ")],e[j][e[j].rindex(" ")+1:]])
        lons_lats_vect = np.column_stack(([x[0] for x in l], [x[1] for x in l])) # Reshape coordinates
        polygon = Polygon(lons_lats_vect)
        d[names[i]] =  polygon# create polygon
    return d

names = zones["Name"].values
locations = zones["the_geom"].values
slowZone = createPolygons(names,locations)

def inSlowZone(slowZones,long,lat):
    for i in slowZones.values():
        point = Point(long, lat)
        if i.touches(point) or point.within(i):
            return True
    return False

"Takes very long to compute so a csv is precomputed for you."
# crashes["slow"] = crashes.apply(lambda x: inSlowZone(slowZone,x["LONGITUDE"],x["LATITUDE"]), axis=1)
crashes = pd.read_csv("CSVs/e.csv")

# Get month/year and year columns to make comparing easier
crashes = crashes.assign(Year = crashes["CRASH DATE"].str.slice(start=-4))
crashes = crashes.assign(Month_Year = crashes["CRASH DATE"].str.slice(stop=2)+"/"+crashes["Year"].str.slice(start=2))


def crash(df):
    """ Returns Series of crashes per year and Series of crashes per borough per year. """
    slowCrashes = {}
    boroughs = {}

    # Using 3 years of data available
    for i in range(2017,2022):
        # For each year, only select relevant years
        year = df[df["Year"]==f"{i}"]

        # Loop through each borough
        for j in ["STATEN ISLAND","BROOKLYN","QUEENS","BRONX","MANHATTAN"]:
            # Select relevant borough and attach the count of crashes to key/value pair
            borough = year[year["BOROUGH"]==j]
            boroughs.setdefault(j,[])
            boroughs[j].append(len(borough))
        
        # Key is year and value is amount of crashes 
        slowCrashes.setdefault(i,len(year))
    return pd.Series(slowCrashes),pd.DataFrame(boroughs).set_axis(list(range(2017,2022)), axis=0, inplace=False)


# Could not get geopandas to work on required dataset and
# shapely does not read strings into Objects
def getCoordinates(speed):
    """ Return Series of Linestring coordinates based on speed limit csv. """
    allCoords = []
    for i in speed["the_geom"].values:
        coords = []
        coord = ""
        c = []
        for j in range(18,len(i)-1):
            if i[j]==" " and i[j-1]!=",":
                c.append(eval(coord))
                coord = ""
            elif i[j]==",":
                c.append(eval(coord))
                coord = ""
                coords.append(tuple(c[::-1]))
                c=[]
            elif i[j]==")":
                c.append(eval(coord))
                coords.append(tuple(c))
                allCoords.append(LineString(coords))
            else:
                coord+=i[j]
    return pd.Series(allCoords)

# This will take multiple hours to compute. A file version is computed already to make it easier
def getSpeedLimits(req,speed):
    """ Returns Series of speed limits for each crash in Motor Vehicle collisions csv. """
    speedies = []
    for v in req.values:
        if type(v[3])==float:
            v[3]=""
        if type(v[4])==float:
            v[4]=""
        if type(v[5])==float:
            v[5]=""
        temp = speed.loc[(speed["street"]==v[3].strip()) | (speed["street"]==v[4].strip()) | (speed["street"]==v[5].strip())]["location"].values
        joe = []
        p = Point(v[1],v[0])
        for index,value in enumerate(temp):
            if value.distance(p)< 1e-3:
                joe.append([value.distance(p),index])
        if not joe:
            speedies.append(0)
        else:
            speedies.append(speed.loc[min(joe)[1]].at["postvz_sl"])
    return pd.Series(speedies)

"Pre computed to make life easier."
# req = crashes[["LATITUDE","LONGITUDE","LOCATION","ON STREET NAME",'CROSS STREET NAME','OFF STREET NAME']]
# speed = speed.assign(location = getCoordinates(speed))
# s = speed.assign(getSpeedLimits(req,speed))
s = pd.read_csv("CSVs/speeds.csv")


def monthlyCrash(df):
    """ Returns Series of crashes per year and Series of crashes per borough per year. """
    slowCrashes = {}
    boroughs = {}

    # Using 3 years of data available
    for i in df["Month_Year"].unique():
        # For each year, only select relevant years
        monthYear = df[df["Month_Year"]==i]

        # Loop through each borough
        for j in ["STATEN ISLAND","BROOKLYN","QUEENS","BRONX","MANHATTAN"]:
            # Select relevant borough and attach the count of crashes to key/value pair
            borough = monthYear[monthYear["BOROUGH"]==j]
            boroughs.setdefault(j,[])
            boroughs[j].append(len(borough))
        
        # Key is year and value is amount of crashes 
        slowCrashes.setdefault(i,len(monthYear))
    return pd.Series(slowCrashes),pd.DataFrame(boroughs).set_axis(list(df["Month_Year"].unique()), axis=0, inplace=False)


# c = "Select BOROUGH, Month_Year, Count(Borough) from crashes Group By Month_Year,Borough"
# cq = psql.sqldf(c)
# cq.to_csv("a.csv")
# print(monthlyCrash(crashes))

speedLimits = crashes.assign(Limit = s.iloc[:,1])
slow = crashes[crashes["slow"]==True]
twenty5 = speedLimits[speedLimits["Limit"]==25]
monthTotal = monthlyCrash(crashes)
monthSlow = monthlyCrash(slow)
# boroDF = slow.groupby(['BOROUGH','Month_Year']).count()
# print(boroDF)
style.use("fivethirtyeight")
e = monthTotal[1][39:-1].plot(figsize = (8,6))
e.tick_params(axis = 'both', which = 'major', labelsize = 12)
# e.set_yticks([0, 25, 50, 75, 100, 125, 150, 175])
e.axhline(y = 0, color = 'black', linewidth = 1.3, alpha = .7)
e.xaxis.label.set_visible(False)
e.text(x = -2.5, y = -325,
    s = ' @CSci 39542, Hunter College, Fall 2021 Source: OpenData NYC',fontsize = 11.5, color = '#f0f0f0', backgroundcolor = 'grey')
e.text(x = -1, y = 2720, s = "Post Pandemic Collisions in New York City",
               fontsize = 20, weight = 'bold', alpha = .75)
e.text(x = -1, y = 2600,
               s = 'By borough and month',
              fontsize = 15, alpha = .85)
# e.set_xlim(left = 1969, right = 2011)
# plt.show()
# plt.savefig(out)
# sns.lineplot(x="",y="",data=monthTotal[1][39:-1])
# plt.show()


twenty5 = twenty5.groupby("Year").agg(MPH_25=pd.NamedAgg(column="Year", aggfunc="count"))
twenty5.index = list(range(2017,2022))

# Get crashes in slow zones and all zones
slowCrash = crash(slow)
allCrashes = crash(crashes)

# Turn dataframe into percent change and rename columns
allTotal = pd.DataFrame(allCrashes[0]).pct_change()
allTotal.columns = ["All"]
slowTotal = pd.DataFrame(slowCrash[0]).pct_change()
slowTotal.columns = ["MPH_20"]

# Join slow zone, 25 mph, and all crash data together
totalCrashes = slowTotal.join(twenty5.pct_change(),how="outer")
totalCrashes = totalCrashes.join(allTotal,how="outer")
totalCrashes = totalCrashes.iloc[1:]
e = totalCrashes.plot.bar(figsize = (8,6),rot=0)
e.tick_params(axis = 'both', which = 'major', labelsize = 12)
# e.set_yticks([0, 25, 50, 75, 100, 125, 150, 175])
e.axhline(y = 0, color = 'black', linewidth = 1.3, alpha = .7)
e.xaxis.label.set_visible(False)
e.text(x = -0.82, y = -0.548,
    s = ' @CSci 39542, Hunter College, Fall 2021 Source: OpenData NYC',fontsize = 11.5, color = '#f0f0f0', backgroundcolor = 'grey')
e.text(x = -0.5, y = 0.07, s = "Comparing Percent Change in Crashes in NYC",
               fontsize = 20, weight = 'bold', alpha = .75)
e.text(x = -0.5, y = 0.04,
               s = 'By speed limit',
              fontsize = 15, alpha = .85)
# ax = totalCrashes.plot.bar(rot=0)
# plt.show()


def getEntries(path):
    """ Returns daily turnstile entry data. """
    dateshi = {}
    # Loop through directory containing turnstile entry data
    for i in os.listdir(path):
        if "turnstile" in i:

            # Order rows as needed in turnstile folder
            turnstiles = pd.read_csv(i)
            t = "SELECT * FROM turnstiles Order BY STATION,SCP,UNIT"
            tuery = psql.sqldf(t)

            # Create row based on number of new entries.
            tuery['num_entries'] = np.where((tuery['SCP'] == tuery['SCP'].shift(1)) & (tuery['UNIT'] == tuery['UNIT'].shift(1)),tuery["ENTRIES"]-tuery["ENTRIES"].shift(1),0)
            tuery = tuery.loc[(tuery["num_entries"]>0) & (tuery["num_entries"]<6000)] # remove junk data
            ents = list(zip(tuery["DATE"], tuery["num_entries"]))
            
            # add entries to dictionary as {date:entry}
            for date, entries in ents:
                dateshi.setdefault(date,0)
                dateshi[date]+=entries
    return dateshi

"Precomputed to save time."
# dates = getEntries(f"{os.getcwd()}/turnstiles")
dates = {'12/30/2017': 2606557.0, '12/31/2017': 2435724.0, '01/01/2018': 2051545.0, '01/02/2018': 5041191.0, '01/03/2018': 5588096.0, '01/04/2018': 3044285.0, '01/05/2018': 4805662.0, '01/06/2018': 2242140.0, '01/07/2018': 2106409.0, '01/08/2018': 5401876.0, '01/09/2018': 5727652.0, '01/10/2018': 5780157.0, '01/11/2018': 5788920.0, '01/12/2018': 5441512.0, '01/13/2018': 2680891.0, '01/14/2018': 2329737.0, '01/15/2018': 3301314.0, '01/16/2018': 5579659.0, '01/17/2018': 5543629.0, '01/18/2018': 5740726.0, '01/19/2018': 5645852.0, '01/20/2018': 2953379.0, '01/21/2018': 2390743.0, '01/22/2018': 5369648.0, '01/23/2018': 5514091.0, '01/24/2018': 5718038.0, '01/25/2018': 5691498.0, '01/26/2018': 5602954.0, '01/27/2018': 2849226.0, '01/28/2018': 2356843.0, '01/29/2018': 5489169.0, '01/30/2018': 5803194.0, '01/31/2018': 5855362.0, '02/01/2018': 5894337.0, '02/02/2018': 5707592.0, '02/03/2018': 
2706955.0, '02/04/2018': 2268271.0, '02/05/2018': 5578893.0, '02/06/2018': 5876756.0, '02/07/2018': 5685774.0, '02/08/2018': 5954893.0, '02/09/2018': 5819597.0, '02/10/2018': 2720787.0, '02/11/2018': 2180421.0, '02/12/2018': 5474628.0, '02/13/2018': 5939894.0, '02/14/2018': 5967405.0, '02/15/2018': 5869933.0, '02/16/2018': 5339955.0, '02/17/2018': 2644205.0, '02/18/2018': 2419237.0, '02/19/2018': 3199222.0, '02/20/2018': 5393863.0, '02/21/2018': 5648214.0, '02/22/2018': 5543538.0, '02/23/2018': 5396353.0, '02/24/2018': 2765941.0, '02/25/2018': 2307489.0, '02/26/2018': 5627764.0, '02/27/2018': 5911622.0, '02/28/2018': 5961097.0, '03/01/2018': 5915914.0, '03/02/2018': 5213177.0, '03/03/2018': 2816358.0, '03/04/2018': 2508683.0, '03/05/2018': 5712018.0, '03/06/2018': 6058468.0, '03/07/2018': 4330525.0, '03/08/2018': 5668140.0, '03/09/2018': 5957772.0, '03/10/2018': 2979310.0, '03/11/2018': 2461204.0, '03/12/2018': 5628385.0, '03/13/2018': 5601773.0, '03/14/2018': 6074780.0, '03/15/2018': 6074873.0, '03/16/2018': 5947110.0, '03/17/2018': 2888967.0, '03/18/2018': 2681018.0, '03/19/2018': 5603572.0, '03/20/2018': 5900804.0, '03/21/2018': 3452986.0, '03/22/2018': 5412607.0, '03/23/2018': 5926025.0, '03/24/2018': 2964723.0, '03/25/2018': 2636818.0, '03/26/2018': 5703764.0, '03/27/2018': 6051334.0, '03/28/2018': 6054748.0, '03/29/2018': 6038861.0, '03/30/2018': 4932445.0, '03/31/2018': 2775333.0, '04/01/2018': 2498059.0, '04/02/2018': 4783537.0, '04/03/2018': 5484595.0, '04/04/2018': 5579755.0, '04/05/2018': 5716987.0, '04/06/2018': 5400289.0, '04/07/2018': 2761963.0, '04/08/2018': 2645841.0, '04/09/2018': 5598107.0, '04/10/2018': 5900798.0, '04/11/2018': 6004792.0, '04/12/2018': 6037522.0, '04/13/2018': 5930563.0, '04/14/2018': 3090471.0, '04/15/2018': 2528718.0, '04/16/2018': 5202182.0, '04/17/2018': 6015654.0, '04/18/2018': 6109202.0, '04/19/2018': 6083453.0, '04/20/2018': 6049122.0, '04/21/2018': 2948012.0, '04/22/2018': 2817963.0, '04/23/2018': 5704036.0, '04/24/2018': 6012925.0, '04/25/2018': 5911822.0, '04/26/2018': 6166981.0, '04/27/2018': 5969060.0, '04/28/2018': 2917744.0, '04/29/2018': 2718577.0, 
'04/30/2018': 5754770.0, '05/01/2018': 6057178.0, '05/02/2018': 6171936.0, '05/03/2018': 6225922.0, '05/04/2018': 5991231.0, '05/05/2018': 2934988.0, '05/06/2018': 2704382.0, '05/07/2018': 5720990.0, '05/08/2018': 6085139.0, '05/09/2018': 6172991.0, '05/10/2018': 6158776.0, '05/11/2018': 6027116.0, '05/12/2018': 2686622.0, '05/13/2018': 2455129.0, '05/14/2018': 5668600.0, '05/15/2018': 6127269.0, '05/16/2018': 6110282.0, '05/17/2018': 6044105.0, '05/18/2018': 5991160.0, '05/19/2018': 2634661.0, '05/20/2018': 2680920.0, '05/21/2018': 5610238.0, '05/22/2018': 5969995.0, '05/23/2018': 6054868.0, '05/24/2018': 6077999.0, '05/25/2018': 5655965.0, '05/26/2018': 2572123.0, '05/27/2018': 2363140.0, '05/28/2018': 2569037.0, '05/29/2018': 5623553.0, '05/30/2018': 5994417.0, '05/31/2018': 5993465.0, '06/01/2018': 5839012.0, '06/02/2018': 2749360.0, '06/03/2018': 2723230.0, '06/04/2018': 5627429.0, '06/05/2018': 5920146.0, '06/06/2018': 6090925.0, '06/07/2018': 5919868.0, '06/08/2018': 5914317.0, '06/09/2018': 2860889.0, '06/10/2018': 2726501.0, '06/11/2018': 5588905.0, '06/12/2018': 5965946.0, '06/13/2018': 5990433.0, '06/14/2018': 6026866.0, '06/15/2018': 5631383.0, '06/16/2018': 2837233.0, '06/17/2018': 2655469.0, '06/18/2018': 5506363.0, '06/19/2018': 5847479.0, '06/20/2018': 5980735.0, '06/21/2018': 5978645.0, '06/22/2018': 5736692.0, '06/23/2018': 2639677.0, '06/24/2018': 3017634.0, '06/25/2018': 5551709.0, '06/26/2018': 5859986.0, '06/27/2018': 5774622.0, '06/28/2018': 5616317.0, '06/29/2018': 5541192.0, '06/30/2018': 2631035.0, '07/01/2018': 2492410.0, '07/02/2018': 5043170.0, '07/03/2018': 5216959.0, '07/04/2018': 2695041.0, '07/05/2018': 4995641.0, '07/06/2018': 4814984.0, '07/07/2018': 2528695.0, '07/08/2018': 2556904.0, '07/09/2018': 5357049.0, '07/10/2018': 5649507.0, '07/11/2018': 5736416.0, '07/12/2018': 5779868.0, '07/13/2018': 5548071.0, '07/14/2018': 2703493.0, '07/15/2018': 2547434.0, '07/16/2018': 5345872.0, '07/17/2018': 5547597.0, '07/18/2018': 5724550.0, '07/19/2018': 5791091.0, '07/20/2018': 5534644.0, '07/21/2018': 2656521.0, '07/22/2018': 2428484.0, '07/23/2018': 5222959.0, '07/24/2018': 5664562.0, '07/25/2018': 5640589.0, '07/26/2018': 5732857.0, '07/27/2018': 5534944.0, '07/28/2018': 2686066.0, '07/29/2018': 2709100.0, '07/30/2018': 5279537.0, '07/31/2018': 
5582823.0, '08/01/2018': 5621536.0, '08/02/2018': 5635317.0, '08/03/2018': 5305426.0, '08/04/2018': 2447596.0, '08/05/2018': 2617439.0, '08/06/2018': 5189562.0, '08/07/2018': 5512701.0, '08/08/2018': 5512972.0, '08/09/2018': 5544989.0, '08/10/2018': 5333999.0, '08/13/2018': 4951164.0, '08/14/2018': 5366118.0, '08/15/2018': 5480766.0, '08/16/2018': 5467816.0, '08/17/2018': 5187840.0, '08/11/2018': 2259135.0, '08/12/2018': 2468837.0, '08/18/2018': 2466495.0, '08/19/2018': 2374997.0, '08/20/2018': 4917919.0, '08/21/2018': 5193429.0, '08/22/2018': 5271414.0, '08/23/2018': 5337640.0, '08/24/2018': 5123133.0, '08/25/2018': 2541198.0, '08/26/2018': 2527450.0, '08/27/2018': 5071700.0, '08/28/2018': 5340292.0, '08/29/2018': 5353989.0, '08/30/2018': 5362962.0, '08/31/2018': 4996574.0, '09/01/2018': 2465811.0, '09/02/2018': 2544310.0, '09/03/2018': 2545767.0, '09/04/2018': 5275302.0, '09/05/2018': 5770929.0, '09/06/2018': 5934611.0, '09/07/2018': 5790214.0, '09/08/2018': 2725376.0, '09/09/2018': 2448084.0, '09/10/2018': 4769770.0, '09/11/2018': 5254751.0, '09/12/2018': 6091901.0, '09/13/2018': 6096269.0, '09/14/2018': 5962745.0, '09/15/2018': 2826745.0, '09/16/2018': 2755391.0, '09/17/2018': 5727210.0, '09/18/2018': 5664737.0, '09/19/2018': 5274106.0, '09/20/2018': 6155482.0, '09/21/2018': 6033233.0, '09/22/2018': 2939738.0, '09/23/2018': 2715935.0, '09/24/2018': 5690316.0, '09/25/2018': 5797268.0, '09/26/2018': 6135970.0, '09/27/2018': 6233350.0, '09/28/2018': 5930373.0, '09/29/2018': 2884365.0, '09/30/2018': 2741467.0, '10/01/2018': 5606483.0, '10/02/2018': 5901022.0, '10/03/2018': 6157360.0, '10/04/2018': 6274058.0, '10/05/2018': 6084292.0, '10/08/2018': 4415590.0, '10/09/2018': 6016539.0, '10/10/2018': 6166972.0, '10/11/2018': 6084530.0, '10/12/2018': 6048893.0, '10/06/2018': 2842284.0, '10/07/2018': 2796689.0, '10/15/2018': 5678529.0, '10/16/2018': 6110098.0, '10/17/2018': 6173708.0, '10/18/2018': 6218109.0, '10/19/2018': 6000250.0, '10/13/2018': 2775735.0, '10/14/2018': 2714469.0, '10/22/2018': 5744553.0, '10/23/2018': 6117200.0, '10/24/2018': 6186340.0, '10/25/2018': 6259144.0, '10/26/2018': 6084804.0, 
'10/20/2018': 2840592.0, '10/21/2018': 2684752.0, '10/29/2018': 5783832.0, '10/30/2018': 6182161.0, '10/31/2018': 6062746.0, '11/01/2018': 6264976.0, '11/02/2018': 6004226.0, '10/27/2018': 2393441.0, '10/28/2018': 2697328.0, '11/03/2018': 2918309.0, '11/04/2018': 3224742.0, '11/05/2018': 5842201.0, '11/06/2018': 5533676.0, '11/07/2018': 6164236.0, '11/08/2018': 6241000.0, '11/09/2018': 5946379.0, '11/12/2018': 4929636.0, '11/13/2018': 5971390.0, '11/14/2018': 6154375.0, '11/15/2018': 6148639.0, '11/16/2018': 5754089.0, '11/10/2018': 2996658.0, '11/11/2018': 2658036.0, '11/19/2018': 5873797.0, '11/20/2018': 6067620.0, '11/21/2018': 5604812.0, '11/22/2018': 2087158.0, '11/23/2018': 3343318.0, '11/17/2018': 2974518.0, '11/18/2018': 2561521.0, '11/24/2018': 2461352.0, '11/25/2018': 2381378.0, '11/26/2018': 5573273.0, '11/27/2018': 6008632.0, '11/28/2018': 6137106.0, '11/29/2018': 6221964.0, '11/30/2018': 6111734.0, '12/01/2018': 3134878.0, '12/02/2018': 2556273.0, '12/03/2018': 5918752.0, '12/04/2018': 6169463.0, '12/05/2018': 6123533.0, '12/06/2018': 6226707.0, '12/07/2018': 6098832.0, '12/08/2018': 3188385.0, '12/09/2018': 2709355.0, '12/10/2018': 5841853.0, '12/11/2018': 6105181.0, '12/12/2018': 6164264.0, '12/13/2018': 6051028.0, '12/14/2018': 6072621.0, '12/15/2018': 3096799.0, '12/16/2018': 2577232.0, '12/17/2018': 5799558.0, '12/18/2018': 6050175.0, '12/19/2018': 6031756.0, '12/20/2018': 5944726.0, '12/21/2018': 5314671.0, '12/22/2018': 2959187.0, '12/23/2018': 2797163.0, '12/24/2018': 3385161.0, '12/25/2018': 1771259.0, '12/26/2018': 4073846.0, '12/27/2018': 4718565.0, '12/28/2018': 4287688.0, '12/29/2018': 3082870.0, '12/30/2018': 2815815.0, '12/31/2018': 3685181.0, '01/01/2019': 2328371.0, '01/02/2019': 5238302.0, '01/03/2019': 5527796.0, '01/04/2019': 5475224.0, '01/05/2019': 2412392.0, '01/06/2019': 2338677.0, '01/07/2019': 5371932.0, '01/08/2019': 5531731.0, '01/09/2019': 5677063.0, '01/10/2019': 5661621.0, '01/11/2019': 5515966.0, '01/12/2019': 2551929.0, '01/13/2019': 2212592.0, '01/14/2019': 5374261.0, '01/15/2019': 5633082.0, '01/16/2019': 5704798.0, '01/17/2019': 5735802.0, '01/18/2019': 5412917.0, '01/19/2019': 2536428.0, '01/20/2019': 1996798.0, '01/21/2019': 2567273.0, '01/22/2019': 5295305.0, '01/23/2019': 5575379.0, '01/24/2019': 5421338.0, '01/25/2019': 
5579074.0, '01/26/2019': 2680236.0, '01/27/2019': 2356414.0, '01/28/2019': 5468075.0, '01/29/2019': 5761191.0, '01/30/2019': 5648384.0, '01/31/2019': 5081514.0, '02/01/2019': 5427564.0, '02/04/2019': 5573668.0, '02/05/2019': 5573080.0, '02/06/2019': 5944635.0, '02/07/2019': 5932516.0, '02/08/2019': 5811106.0, '02/02/2019': 2595436.0, '02/03/2019': 2303027.0, '02/09/2019': 2711251.0, '02/11/2019': 5620675.0, '02/12/2019': 5153885.0, '02/13/2019': 5907105.0, '02/14/2019': 5994179.0, '02/15/2019': 5642114.0, '02/10/2019': 2340681.0, '02/19/2019': 5436326.0, '02/20/2019': 5299790.0, '02/21/2019': 5589641.0, '02/22/2019': 5480265.0, '02/16/2019': 2738637.0, '02/18/2019': 3156695.0, '02/17/2019': 2487410.0, '02/25/2019': 5529428.0, '02/26/2019': 5832887.0, '02/27/2019': 5823781.0, '02/28/2019': 5942765.0, '03/01/2019': 5734121.0, '02/23/2019': 2683444.0, '02/24/2019': 2208545.0, '03/04/2019': 4449907.0, '03/05/2019': 5921336.0, '03/06/2019': 5941616.0, '03/07/2019': 5991252.0, '03/08/2019': 5879178.0, '03/02/2019': 2595013.0, '03/03/2019': 2401900.0, '03/10/2019': 2164013.0, '03/11/2019': 5639104.0, '03/12/2019': 5988122.0, '03/13/2019': 6051127.0, '03/14/2019': 6041526.0, '03/15/2019': 5883882.0, '03/09/2019': 2901706.0, '03/18/2019': 5523170.0, '03/19/2019': 5859589.0, '03/20/2019': 5965296.0, '03/21/2019': 5828625.0, '03/22/2019': 5660408.0, '03/16/2019': 2867723.0, '03/17/2019': 2646093.0, '03/23/2019': 2698423.0, '03/24/2019': 2614457.0, '03/25/2019': 5548686.0, '03/26/2019': 5901460.0, '03/27/2019': 5986433.0, '03/28/2019': 6042971.0, '03/29/2019': 5828638.0, '03/30/2019': 2907919.0, '03/31/2019': 2507676.0, '04/01/2019': 5651748.0, '04/02/2019': 5990528.0, '04/03/2019': 6121022.0, '04/04/2019': 6136451.0, '04/05/2019': 5898109.0, '04/06/2019': 2940302.0, '04/07/2019': 2763961.0, '04/08/2019': 5646663.0, '04/09/2019': 6007895.0, '04/10/2019': 6076073.0, '04/11/2019': 6074337.0, '04/12/2019': 5891257.0, '04/13/2019': 2931739.0, '04/14/2019': 2711279.0, '04/15/2019': 5650035.0, '04/16/2019': 6074103.0, '04/17/2019': 6179382.0, '04/18/2019': 6078376.0, '04/19/2019': 4967091.0, '04/20/2019': 2520626.0, 
'04/21/2019': 2543613.0, '04/22/2019': 5098861.0, '04/23/2019': 5623962.0, '04/24/2019': 5655701.0, '04/25/2019': 5728748.0, '04/26/2019': 5295871.0, '04/27/2019': 2894732.0, '04/29/2019': 5669550.0, '04/30/2019': 5932240.0, '05/01/2019': 6066956.0, '05/02/2019': 6101316.0, '05/03/2019': 5940777.0, '04/28/2019': 2677963.0, '05/06/2019': 5706569.0, '05/07/2019': 6028839.0, '05/08/2019': 6080665.0, '05/09/2019': 6091781.0, '05/10/2019': 5806888.0, '05/04/2019': 2866675.0, '05/05/2019': 2580417.0, '05/13/2019': 5549984.0, '05/14/2019': 5981421.0, '05/15/2019': 6103600.0, '05/16/2019': 6167505.0, '05/17/2019': 5981380.0, '05/11/2019': 2872839.0, '05/12/2019': 2302698.0, '05/20/2019': 5712578.0, '05/21/2019': 5992348.0, '05/22/2019': 5980164.0, '05/23/2019': 5804530.0, '05/24/2019': 5942477.0, '05/18/2019': 3021033.0, '05/19/2019': 2862137.0, '05/28/2019': 5578477.0, '05/29/2019': 5977009.0, '05/30/2019': 5971681.0, '05/31/2019': 5867595.0, '05/25/2019': 2684961.0, '05/26/2019': 2742128.0, '05/27/2019': 2702336.0, '06/03/2019': 5649643.0, '06/04/2019': 5722542.0, '06/05/2019': 6024667.0, '06/06/2019': 5914381.0, '06/07/2019': 5818547.0, '06/01/2019': 2786937.0, '06/02/2019': 2740283.0, '06/09/2019': 2807350.0, '06/10/2019': 5444730.0, '06/11/2019': 5853556.0, '06/12/2019': 6143192.0, '06/13/2019': 5971345.0, '06/14/2019': 5865330.0, '06/08/2019': 2862596.0, '06/17/2019': 5571801.0, '06/18/2019': 5861447.0, '06/19/2019': 5969547.0, '06/20/2019': 5926592.0, '06/21/2019': 5750826.0, '06/15/2019': 2821283.0, '06/16/2019': 2568105.0, '06/24/2019': 5581673.0, '06/25/2019': 5759561.0, '06/26/2019': 6067226.0, '06/27/2019': 5895423.0, '06/28/2019': 5706051.0, '06/22/2019': 2888638.0, '06/23/2019': 2846638.0, '06/29/2019': 2805744.0, '06/30/2019': 3185526.0, '07/01/2019': 5457418.0, '07/02/2019': 5576597.0, '07/03/2019': 5488145.0, '07/04/2019': 2862758.0, '07/05/2019': 4103196.0, '07/08/2019': 5300671.0, '07/09/2019': 5691036.0, '07/10/2019': 5859260.0, '07/11/2019': 5835657.0, '07/12/2019': 5531776.0, '07/06/2019': 2302214.0, '07/07/2019': 2456843.0, '07/15/2019': 5441536.0, '07/16/2019': 5798389.0, '07/17/2019': 5797751.0, '07/18/2019': 5637973.0, '07/19/2019': 5385181.0, '07/14/2019': 2578122.0, '07/13/2019': 2731751.0, '07/21/2019': 2348413.0, '07/22/2019': 5269407.0, '07/23/2019': 
5444081.0, '07/24/2019': 5787888.0, '07/25/2019': 5836036.0, '07/26/2019': 5528916.0, '07/20/2019': 2325067.0, '07/29/2019': 5290091.0, '07/30/2019': 5627007.0, '07/31/2019': 5662019.0, '08/01/2019': 5670181.0, '08/02/2019': 5424539.0, '07/28/2019': 2644616.0, '07/27/2019': 2698639.0, '08/05/2019': 5317947.0, '08/06/2019': 5573788.0, '08/07/2019': 5606858.0, '08/08/2019': 5601227.0, '08/09/2019': 5408142.0, '08/03/2019': 2647702.0, '08/04/2019': 2655008.0, '08/12/2019': 5190061.0, '08/13/2019': 5409510.0, '08/14/2019': 5501967.0, '08/15/2019': 5546767.0, '08/16/2019': 5264001.0, '08/10/2019': 2667314.0, '08/11/2019': 2689120.0, '08/19/2019': 4971270.0, '08/20/2019': 5324936.0, '08/21/2019': 5332298.0, '08/22/2019': 5302034.0, '08/23/2019': 5045794.0, '08/18/2019': 2502658.0, '08/17/2019': 2550981.0, '08/26/2019': 5029782.0, '08/27/2019': 5437461.0, '08/28/2019': 5479713.0, '08/29/2019': 5489858.0, '08/30/2019': 5109696.0, '08/24/2019': 2570610.0, '08/25/2019': 2544916.0, '09/03/2019': 5415430.0, '09/04/2019': 5769264.0, '09/05/2019': 5999663.0, '09/06/2019': 5886704.0, '08/31/2019': 2591019.0, '09/01/2019': 2669276.0, '09/02/2019': 2388754.0, '09/09/2019': 5809966.0, '09/10/2019': 6128973.0, '09/11/2019': 6197334.0, '09/12/2019': 6220308.0, '09/13/2019': 6072583.0, '09/07/2019': 2858917.0, '09/08/2019': 2751086.0, '09/16/2019': 5820210.0, '09/17/2019': 6165601.0, '09/18/2019': 6264992.0, '09/19/2019': 6284576.0, '09/20/2019': 6199990.0, '09/14/2019': 2785261.0, '09/15/2019': 2765433.0, '09/23/2019': 5871244.0, '09/24/2019': 6237204.0, '09/25/2019': 6312918.0, '09/26/2019': 6335306.0, '09/27/2019': 6115407.0, '09/21/2019': 2964680.0, '09/22/2019': 2839125.0, '09/29/2019': 2763808.0, '09/30/2019': 4987310.0, '10/01/2019': 5414099.0, '10/02/2019': 6190176.0, '10/03/2019': 6257270.0, '10/04/2019': 6215560.0, '09/28/2019': 2864331.0, '10/05/2019': 2967074.0, '10/06/2019': 2753307.0, '10/07/2019': 5849129.0, '10/08/2019': 5988704.0, '10/09/2019': 5154704.0, '10/10/2019': 6227273.0, '10/11/2019': 6111806.0, '10/12/2019': 2918051.0, '10/13/2019': 2857441.0, '10/14/2019': 4412627.0, '10/15/2019': 6036725.0, 
'10/16/2019': 6144586.0, '10/17/2019': 6264008.0, '10/18/2019': 6204138.0, '10/19/2019': 3009820.0, '10/20/2019': 2683258.0, '10/21/2019': 5760506.0, '10/22/2019': 6056118.0, '10/23/2019': 6281532.0, '10/24/2019': 6382446.0, '10/25/2019': 6142993.0, '10/26/2019': 2978922.0, '10/27/2019': 2426960.0, '10/28/2019': 5858104.0, '10/29/2019': 6218239.0, '10/30/2019': 6267110.0, '10/31/2019': 6045085.0, '11/01/2019': 6201157.0, '11/02/2019': 2991999.0, '11/03/2019': 3231289.0, '11/04/2019': 6000021.0, '11/05/2019': 5783193.0, '11/06/2019': 6262827.0, '11/07/2019': 6276478.0, '11/08/2019': 6054886.0, '11/09/2019': 3021051.0, '11/10/2019': 2681927.0, '11/11/2019': 4953995.0, '11/12/2019': 6029537.0, '11/13/2019': 6063922.0, '11/14/2019': 6117323.0, '11/15/2019': 6032135.0, '11/16/2019': 3024763.0, '11/17/2019': 2595182.0, '11/18/2019': 5777287.0, '11/19/2019': 6117849.0, '11/20/2019': 6195628.0, '11/21/2019': 6234930.0, '11/22/2019': 6028527.0, '11/23/2019': 2970300.0, '11/24/2019': 2413416.0, '11/25/2019': 5867874.0, '11/26/2019': 6073115.0, '11/27/2019': 5538124.0, '11/28/2019': 2287654.0, '11/29/2019': 3527823.0, '11/30/2019': 2663054.0, '12/01/2019': 2195114.0, '12/02/2019': 5397098.0, '12/03/2019': 6026876.0, '12/04/2019': 6230989.0, '12/05/2019': 6304512.0, '12/06/2019': 6178298.0, '12/07/2019': 3290510.0, '12/08/2019': 2862825.0, '12/09/2019': 5784999.0, '12/10/2019': 6137089.0, '12/11/2019': 6183727.0, '12/12/2019': 6295966.0, '12/13/2019': 6117353.0, '12/14/2019': 3200163.0, '12/15/2019': 3004193.0, '12/16/2019': 5875493.0, '12/17/2019': 5905624.0, '12/18/2019': 6164982.0, '12/19/2019': 5931454.0, '12/20/2019': 5810173.0, '12/21/2019': 2962312.0, '12/22/2019': 2810835.0, '12/23/2019': 4880132.0, '12/24/2019': 3858894.0, '12/25/2019': 1849878.0, '12/26/2019': 4011322.0, '12/27/2019': 4466057.0, '12/28/2019': 2938651.0, '12/29/2019': 2676476.0, '12/30/2019': 4432002.0, '12/31/2019': 4186188.0, '01/01/2020': 2475750.0, '01/02/2020': 5136600.0, '01/03/2020': 5120258.0}


# Turn daily entries into monthly entries
monthlyEntries = {}
for i in dates.keys():
    # print(i)
    monthlyEntries.setdefault(f"{i[:2]}/{i[-4:]}",0)
    monthlyEntries[f"{i[:2]}/{i[-4:]}"]+=dates[i]

# Remove unneccessary dates
monthlyEntries.pop("01/2020")
monthlyEntries.pop("12/2017")
monthlyEntries = pd.DataFrame(pd.Series(monthlyEntries)) # turn into Dataframe

# Only need 2018 and 2019 for turnstile data comparison
monthlyCrashes = crashes.loc[crashes["Year"].astype(int)<2020]
monthlyCrashes = monthlyCrashes.loc[crashes["Year"].astype(int)>2017]

# Get crashes
monthlyCrashes["Month_Year"] = monthlyCrashes["Month_Year"].str.slice(stop=3) + "20" + monthlyCrashes["Month_Year"].str.slice(start=3)
# print(monthlyCrashes["Month_Year"])
df = monthlyCrashes.groupby("Month_Year").agg(crashes=pd.NamedAgg(column="Month_Year", aggfunc="count"))


# Join crash data and turnstile entry data
jason = monthlyEntries.join(df, how="outer")
jason.columns = ["turnstiles","crashes"]
sns.lmplot(x="turnstiles",y="crashes",data=jason,height=6, aspect=8/6)

plt.show()



# Needs ipynb to run
def drawHeatMap(location, val, zoom, intensity, radius):
    # setting the data and parameters
    heatmap_layer = gmaps.heatmap_layer(location, val, dissipating = True)
    heatmap_layer.max_intensity = intensity
    heatmap_layer.point_radius = radius
    # draw the heatmap into a figure
    fig = gmaps.figure(center = [40,-74], zoom_level=zoom)
    fig.add_layer(heatmap_layer)
    return fig

locations = crashes[["LATITUDE","LONGITUDE"]].loc[crashes["LONGITUDE"].astype(float)>=-180]
e = drawHeatMap(locations, pd.Series([1]*len(locations)), 10, 5, 15)
